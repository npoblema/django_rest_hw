name: Django CI

on: [push]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          rsync -avzr -e "ssh -o StrictHostKeyChecking=no" \
            --exclude '__pycache__' \
            --exclude '.git' \
            --exclude '.gitignore' \
            ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}

      - name: Развертывание с Docker Compose на сервере
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            # Переходим в директорию развертывания
            cd ${{ secrets.DEPLOY_DIR }} || { echo "Директория не найдена"; exit 1; }

            # Устанавливаем Docker и Docker Compose, если их нет
            if ! command -v docker >/dev/null 2>&1; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
              sudo usermod -aG docker ${{ secrets.SSH_USER }}
            fi

            if ! docker compose version >/dev/null 2>&1; then
              echo "Installing Docker Compose..."
              sudo apt-get update
              sudo apt install -y docker-compose-plugin
            fi

            # Останавливаем и удаляем старые контейнеры
            docker compose down || true

            # Загружаем переменные окружения из .env
            if [ -f .env ]; then
              export $(cat .env | grep -v '^#' | xargs)
            fi

            # Собираем и запускаем контейнеры
            docker compose up -d --build

            # Проверяем статус контейнеров
            echo "Deployment completed. Checking container status:"
            docker ps -a
          EOF