name: Django CI

on: [ push ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4  # Обновлено до последней версии

      - name: Set up Python
        uses: actions/setup-python@v5  # Обновлено до последней версии
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set environment variables
        run: echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0  # Обновлено до последней версии
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Copy project files to server
        run: |
          echo "Listing files in GitHub Actions runner before rsync:"
          ls -la
          rsync -avzr -e "ssh -o StrictHostKeyChecking=no" --exclude '__pycache__' --exclude '.git' --exclude '.gitignore' --exclude '.env.sample' ./ ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }}:${{ secrets.DEPLOY_DIR }}
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "After rsync, listing contents of ${{ secrets.DEPLOY_DIR }}:"
            ls -la ${{ secrets.DEPLOY_DIR }}
            ls -la ${{ secrets.DEPLOY_DIR }}/lms_project 2>/dev/null || echo "lms_project directory not found"
          EOF

      - name: Install dependencies on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "Installing python3-venv..."
            sudo apt update
            sudo apt install -y python3.12-venv
            echo "Before cd, current directory:"
            pwd
            ls -la
            cd ${{ secrets.DEPLOY_DIR }}
            echo "After cd, current directory:"
            pwd
            ls -la
            rm -rf venv  # Удаляем старую (возможно поврежденную) виртуальную среду
            python3 -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            echo "Before installing requirements, listing contents:"
            ls -la
            pip install -r requirements.txt
          EOF

      - name: Apply migrations on server
        env:
          TEST_ENV: ''
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            echo "Before cd, current directory:"
            pwd
            ls -la
            cd ${{ secrets.DEPLOY_DIR }}/lms_project
            echo "After cd, current directory:"
            pwd
            ls -la
            source ../venv/bin/activate  # Активируем venv из родительской директории
            export SECRET_KEY='${{ secrets.SECRET_KEY }}'
            export TEST_ENV=true
            echo "DEBUG: TEST_ENV=$TEST_ENV"
            python manage.py migrate
          EOF

      - name: Collect static files on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            cd ${{ secrets.DEPLOY_DIR }}/lms_project
            source ../venv/bin/activate
            export SECRET_KEY='${{ secrets.SECRET_KEY }}'
            export POSTGRES_DB='drf-hw'
            export POSTGRES_USER='postgres'
            export POSTGRES_PASSWORD='simplepassword123'
            export DATABASE_HOST='localhost'
            export DATABASE_PORT='5432'
            export TEST_ENV=''
            echo "DEBUG: POSTGRES_DB=$POSTGRES_DB"
            echo "DEBUG: TEST_ENV=$TEST_ENV"
            python manage.py collectstatic --noinput
          EOF
